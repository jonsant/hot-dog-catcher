{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"gamecanvas\"];\nconst _c1 = function (a0, a1, a2) {\n  return {\n    opacity: a0,\n    transform: a1,\n    left: a2\n  };\n};\nfunction HotDogCatcherComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction3(2, _c1, ctx_r1.missedMsgOpacity, \"translateX(-50%) rotate(\" + ctx_r1.missedMsgAngle + \"deg)\", \"calc(50% + \" + ctx_r1.missedMsgOffsetX + \"px)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.missedMsg, \"\\n\");\n  }\n}\nfunction HotDogCatcherComponent_div_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.quitByEscape ? \"Dog quitter!\" : \"You're wasting too many delicious dogs!!\", \" \");\n  }\n}\nfunction HotDogCatcherComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function HotDogCatcherComponent_div_3_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.startGame());\n    });\n    i0.ɵɵtext(2, \"Let's catch some dogs!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, HotDogCatcherComponent_div_3_div_3_Template, 2, 1, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.gameOver);\n  }\n}\nexport let HotDogCatcherComponent = /*#__PURE__*/(() => {\n  class HotDogCatcherComponent {\n    constructor() {\n      this.quitByEscape = false;\n      this.leftPressed = false;\n      this.rightPressed = false;\n      this.lastMissedMsgIdx = null;\n      this.missedMsgAngle = 0;\n      this.missedMsgOffsetX = 0;\n      this.canvasWidth = 0;\n      this.canvasHeight = 0;\n      // Player hand (bun)\n      this.handWidth = 200;\n      this.handHeight = 200;\n      this.handX = 160;\n      this.handY = 550;\n      this.handSpeed = 4; // Even slower hand movement for precise control\n      // Hot dogs\n      this.hotDogs = [];\n      this.hotDogWidth = 80;\n      this.hotDogHeight = 140;\n      this.hotDogSpeed = 3;\n      this.hotDogInterval = 1200; // ms\n      this.lastHotDogTime = 0;\n      this.score = 0;\n      this.level = 1;\n      this.health = 5;\n      this.animationFrameId = null;\n      this.showPlayButton = true;\n      this.gameStarted = false;\n      this.gameOver = false;\n      this.bunImg = null;\n      this.bunLoaded = false;\n      this.hotDogImg = null;\n      this.hotDogLoaded = false;\n      this.missedCount = 0;\n      this.showMissedMsg = false;\n      this.missedMsg = '';\n      this.missedMsgTimeout = null;\n      this.missedMsgOpacity = 1;\n      this.missedMsgList = [\"Hot Dog catcher? More like dog waster!!!\", \"God! You're wasting delicious dogs!!!\", \"Oh you need practice, for sure!\"];\n      this.gameLoop = () => {\n        if (!this.gameStarted) return;\n        const now = performance.now();\n        if (now - this.lastHotDogTime > this.hotDogInterval) {\n          this.spawnHotDog();\n          this.lastHotDogTime = now;\n        }\n        this.update();\n        this.draw();\n        this.animationFrameId = requestAnimationFrame(this.gameLoop);\n      };\n    }\n    ngOnInit() {\n      // Set canvas size to fill window below toolbar\n      this.setCanvasSize();\n      const canvas = this.canvasRef.nativeElement;\n      this.ctx = canvas.getContext('2d');\n      this.resetGame();\n      // Load bun image\n      this.bunImg = new Image();\n      this.bunImg.src = 'assets/bun.png';\n      this.bunImg.onload = () => {\n        this.bunLoaded = true;\n        // Optionally, redraw if needed\n        this.draw();\n      };\n      // Load hot dog image\n      this.hotDogImg = new Image();\n      this.hotDogImg.src = 'assets/dog.png';\n      this.hotDogImg.onload = () => {\n        this.hotDogLoaded = true;\n        // Optionally, redraw if needed\n        this.draw();\n      };\n    }\n    showRandomMissedMsg() {\n      if (this.missedMsgTimeout) {\n        clearTimeout(this.missedMsgTimeout);\n      }\n      // Prevent message on play screen\n      if (this.showPlayButton) return;\n      let idx;\n      do {\n        idx = Math.floor(Math.random() * this.missedMsgList.length);\n      } while (this.missedMsgList.length > 1 && idx === this.lastMissedMsgIdx);\n      this.lastMissedMsgIdx = idx;\n      this.missedMsg = this.missedMsgList[idx];\n      // Random angle between -10 and 10 degrees\n      this.missedMsgAngle = Math.random() * 20 - 10;\n      // Random horizontal offset between -60 and 60px\n      this.missedMsgOffsetX = Math.floor(Math.random() * 120 - 60);\n      this.showMissedMsg = true;\n      this.missedMsgOpacity = 1;\n      // Fade out over 3 seconds\n      const fadeDuration = 3000;\n      const fadeSteps = 30;\n      let step = 0;\n      const fade = () => {\n        step++;\n        this.missedMsgOpacity = 1 - step / fadeSteps;\n        if (step < fadeSteps) {\n          this.missedMsgTimeout = setTimeout(fade, fadeDuration / fadeSteps);\n        } else {\n          this.showMissedMsg = false;\n          this.missedMsgOpacity = 1;\n        }\n      };\n      fade();\n    }\n    startGame() {\n      this.quitByEscape = false;\n      this.showPlayButton = false;\n      this.gameStarted = true;\n      this.gameOver = false;\n      this.resetGame();\n      this.level = 1;\n      this.hotDogSpeed = 3; // Reset speed on new game\n      this.health = 5;\n      this.missedCount = 0;\n      this.showMissedMsg = false;\n      this.missedMsg = '';\n      this.missedMsgOpacity = 1;\n      this.gameLoop();\n    }\n    resetGame() {\n      this.quitByEscape = false;\n      this.handX = (this.canvasWidth - this.handWidth) / 2;\n      this.hotDogs = [];\n      this.score = 0;\n      this.level = 1;\n      this.hotDogSpeed = 3;\n      this.health = 5;\n      this.missedCount = 0;\n      this.showMissedMsg = false;\n      this.missedMsg = '';\n      this.missedMsgOpacity = 1;\n      this.lastHotDogTime = performance.now();\n      // Clear canvas\n      if (this.ctx) {\n        this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n      }\n    }\n    onKeyDown(event) {\n      if (event.key === 'ArrowLeft') {\n        this.leftPressed = true;\n      } else if (event.key === 'ArrowRight') {\n        this.rightPressed = true;\n      } else if (event.key === 'Escape') {\n        if (this.gameStarted && !this.gameOver) {\n          this.quitByEscape = true;\n          this.gameOver = true;\n          this.gameStarted = false;\n          this.showPlayButton = true;\n          if (this.animationFrameId) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = null;\n          }\n          this.draw();\n        }\n      }\n    }\n    onKeyUp(event) {\n      if (event.key === 'ArrowLeft') {\n        this.leftPressed = false;\n      } else if (event.key === 'ArrowRight') {\n        this.rightPressed = false;\n      }\n    }\n    onMouseMove(event) {\n      const rect = this.canvasRef.nativeElement.getBoundingClientRect();\n      const mouseX = event.clientX - rect.left;\n      this.handX = Math.max(0, Math.min(this.canvasWidth - this.handWidth, mouseX - this.handWidth / 2));\n    }\n    onResize() {\n      this.setCanvasSize();\n      this.resetGame();\n    }\n    setCanvasSize() {\n      // 60px toolbar height\n      this.canvasWidth = window.innerWidth;\n      this.canvasHeight = window.innerHeight - 60;\n      if (this.canvasRef && this.canvasRef.nativeElement) {\n        this.canvasRef.nativeElement.width = this.canvasWidth;\n        this.canvasRef.nativeElement.height = this.canvasHeight;\n      }\n      // Adjust hand position to bottom\n      this.handY = this.canvasHeight - this.handHeight * 0.94;\n      // Ensure hand stays in bounds if resized\n      this.handX = Math.max(0, Math.min(this.handX, this.canvasWidth - this.handWidth));\n    }\n    spawnHotDog() {\n      // Start hot dog above the visible area\n      const x = Math.random() * (this.canvasWidth - this.hotDogWidth);\n      this.hotDogs.push({\n        x,\n        y: -this.hotDogHeight,\n        width: this.hotDogWidth,\n        height: this.hotDogHeight,\n        speed: this.hotDogSpeed\n      });\n    }\n    update() {\n      // Smooth hand movement\n      if (this.leftPressed) {\n        this.handX = Math.max(0, this.handX - this.handSpeed);\n      }\n      if (this.rightPressed) {\n        this.handX = Math.min(this.canvasWidth - this.handWidth, this.handX + this.handSpeed);\n      }\n      // Smooth hand movement\n      if (this.leftPressed) {\n        this.handX = Math.max(0, this.handX - this.handSpeed);\n      }\n      if (this.rightPressed) {\n        this.handX = Math.min(this.canvasWidth - this.handWidth, this.handX + this.handSpeed);\n      }\n      // Move hot dogs\n      for (const hotDog of this.hotDogs) {\n        hotDog.y += hotDog.speed;\n      }\n      // Check for catches\n      this.hotDogs = this.hotDogs.filter(hd => {\n        const handTop = this.handY + this.handHeight * 0.6;\n        if (hd.y + hd.height >= handTop && hd.x + hd.width > this.handX && hd.x < this.handX + this.handWidth) {\n          this.score += 10;\n          // Level up every 10 catches\n          const newLevel = Math.floor(this.score / 100) + 1;\n          if (newLevel > this.level) {\n            this.level = newLevel;\n            this.hotDogSpeed += 0.7; // Increase speed each level\n            this.health += 1; // Increase health by one for each level up\n            if (this.level % 2 === 0) {\n              this.handSpeed += 0.5; // Slightly increase hand speed every second level\n            }\n          }\n\n          return false;\n        }\n        // Remove if off screen, lose health\n        if (hd.y >= this.canvasHeight) {\n          this.health = Math.max(0, this.health - 1);\n          this.missedCount++;\n          if (this.missedCount % 2 === 0) {\n            this.showRandomMissedMsg();\n          }\n          if (this.health === 0 && !this.gameOver) {\n            this.endGame();\n          }\n          return false;\n        }\n        return true;\n      });\n    }\n    endGame() {\n      this.quitByEscape = false;\n      this.gameOver = true;\n      this.gameStarted = false;\n      this.showPlayButton = true;\n      // Stop animation loop\n      if (this.animationFrameId) {\n        cancelAnimationFrame(this.animationFrameId);\n        this.animationFrameId = null;\n      }\n      this.draw();\n    }\n    draw() {\n      // Show game over message if needed\n      if (this.gameOver && this.showPlayButton) {\n        this.ctx.save();\n        this.ctx.font = \"bold 48px 'Comic Sans MS', 'Comic Sans', 'Chalkboard SE', 'Comic Neue', cursive, sans-serif\";\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'middle';\n        this.ctx.shadowColor = '#fff7e0';\n        this.ctx.shadowBlur = 8;\n        this.ctx.fillStyle = '#e74c3c';\n        const msg = this.quitByEscape ? 'Dog quitter!' : 'Too many delicious dogs were wasted!';\n        this.ctx.fillText(msg, this.canvasWidth / 2, this.canvasHeight / 2 - 40);\n        this.ctx.restore();\n      }\n      // Draw sky blue gradient background\n      const skyGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvasHeight);\n      skyGradient.addColorStop(0, '#87ceeb'); // Sky blue top\n      skyGradient.addColorStop(1, '#b3e0ff'); // Lighter blue bottom\n      this.ctx.fillStyle = skyGradient;\n      this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n      // Draw hand (bun)\n      if (this.bunLoaded && this.bunImg) {\n        this.ctx.drawImage(this.bunImg, this.handX, this.handY, this.handWidth, this.handHeight);\n      } else {\n        this.ctx.fillStyle = '#deb887';\n        this.ctx.fillRect(this.handX, this.handY, this.handWidth, this.handHeight);\n      }\n      // Draw hot dogs\n      for (const hotDog of this.hotDogs) {\n        if (this.hotDogLoaded && this.hotDogImg) {\n          this.ctx.drawImage(this.hotDogImg, hotDog.x, hotDog.y, hotDog.width, hotDog.height);\n        } else {\n          this.ctx.fillStyle = '#c1440e';\n          this.ctx.fillRect(hotDog.x, hotDog.y, hotDog.width, hotDog.height);\n        }\n      }\n      // Draw score\n      this.ctx.fillStyle = '#222';\n      this.ctx.font = \"bold 28px 'Comic Sans MS', 'Comic Sans', 'Chalkboard SE', 'Comic Neue', cursive, sans-serif\";\n      this.ctx.textBaseline = 'top';\n      this.ctx.shadowColor = '#fff7e0';\n      this.ctx.shadowBlur = 0;\n      this.ctx.shadowOffsetX = 1;\n      this.ctx.shadowOffsetY = 2;\n      this.ctx.fillText('Score: ' + this.score, 10, 20);\n      this.ctx.shadowColor = '#cdaa7d';\n      this.ctx.shadowOffsetX = 2;\n      this.ctx.shadowOffsetY = 3;\n      // Draw level below score\n      this.ctx.font = \"bold 22px 'Comic Sans MS', 'Comic Sans', 'Chalkboard SE', 'Comic Neue', cursive, sans-serif\";\n      this.ctx.fillText('Level: ' + this.level, 10, 55);\n      // Draw health below level\n      this.ctx.font = \"bold 22px 'Comic Sans MS', 'Comic Sans', 'Chalkboard SE', 'Comic Neue', cursive, sans-serif\";\n      this.ctx.shadowColor = '#e74c3c';\n      this.ctx.shadowOffsetX = 1;\n      this.ctx.shadowOffsetY = 2;\n      this.ctx.fillStyle = '#e74c3c';\n      this.ctx.fillText('Health: ' + this.health, 10, 85);\n      // Reset shadow\n      this.ctx.shadowColor = 'transparent';\n      this.ctx.shadowOffsetX = 0;\n      this.ctx.shadowOffsetY = 0;\n      // ...existing code...\n    }\n\n    ngOnDestroy() {\n      this.gameStarted = false;\n      if (this.animationFrameId) {\n        cancelAnimationFrame(this.animationFrameId);\n      }\n    }\n    static {\n      this.ɵfac = function HotDogCatcherComponent_Factory(t) {\n        return new (t || HotDogCatcherComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: HotDogCatcherComponent,\n        selectors: [[\"app-hot-dog-catcher\"]],\n        viewQuery: function HotDogCatcherComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasRef = _t.first);\n          }\n        },\n        hostBindings: function HotDogCatcherComponent_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"keydown\", function HotDogCatcherComponent_keydown_HostBindingHandler($event) {\n              return ctx.onKeyDown($event);\n            }, false, i0.ɵɵresolveWindow)(\"keyup\", function HotDogCatcherComponent_keyup_HostBindingHandler($event) {\n              return ctx.onKeyUp($event);\n            }, false, i0.ɵɵresolveWindow)(\"mousemove\", function HotDogCatcherComponent_mousemove_HostBindingHandler($event) {\n              return ctx.onMouseMove($event);\n            }, false, i0.ɵɵresolveWindow)(\"resize\", function HotDogCatcherComponent_resize_HostBindingHandler() {\n              return ctx.onResize();\n            }, false, i0.ɵɵresolveWindow);\n          }\n        },\n        decls: 4,\n        vars: 4,\n        consts: [[\"tabindex\", \"0\", 2, \"border\", \"1px solid #333\", \"background\", \"#f5f5f5\", \"display\", \"block\", \"margin\", \"auto\"], [\"gamecanvas\", \"\"], [\"class\", \"missed-msg\", 3, \"ngStyle\", 4, \"ngIf\"], [\"class\", \"play-btn-container\", 4, \"ngIf\"], [1, \"missed-msg\", 3, \"ngStyle\"], [1, \"play-btn-container\"], [1, \"play-btn\", 3, \"click\"], [\"class\", \"game-over-msg\", 4, \"ngIf\"], [1, \"game-over-msg\"]],\n        template: function HotDogCatcherComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelement(0, \"canvas\", 0, 1);\n            i0.ɵɵtemplate(2, HotDogCatcherComponent_div_2_Template, 2, 6, \"div\", 2);\n            i0.ɵɵtemplate(3, HotDogCatcherComponent_div_3_Template, 4, 1, \"div\", 3);\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"width\", ctx.canvasWidth)(\"height\", ctx.canvasHeight);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.showMissedMsg && !ctx.showPlayButton);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.showPlayButton);\n          }\n        },\n        dependencies: [i1.NgIf, i1.NgStyle],\n        styles: [\"canvas[_ngcontent-%COMP%]{position:absolute;top:60px;left:0;width:100vw!important;height:calc(100vh - 60px)!important;max-width:100vw;max-height:calc(100vh - 60px);border:none!important;background:linear-gradient(to bottom,#87ceeb 0%,#b3e0ff 100%);display:block;margin:0;z-index:1}.toolbar[_ngcontent-%COMP%]{position:fixed;top:0;left:0;right:0;height:60px;z-index:10}body[_ngcontent-%COMP%], html[_ngcontent-%COMP%], [_nghost-%COMP%]{margin:0;padding:0;width:100vw;height:100vh;overflow:hidden}button[_ngcontent-%COMP%]{display:initial}.play-btn-container[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100vw;height:calc(100vh - 60px);z-index:20;display:flex;flex-direction:column;align-items:center;justify-content:center}.play-btn[_ngcontent-%COMP%]{font-size:2rem;padding:1.2rem 3.5rem;background:#deb887;color:#333;border:none;border-radius:12px;box-shadow:0 4px 16px #0000002e;cursor:pointer;transition:background .2s;outline:none;font-family:Comic Sans MS,Comic Sans,Chalkboard SE,Comic Neue,cursive,sans-serif;letter-spacing:2px;text-shadow:1px 2px 0 #fff7e0,2px 3px 0 #cdaa7d}.play-btn[_ngcontent-%COMP%]:hover{background:#cdaa7d}.game-over-msg[_ngcontent-%COMP%]{font-family:Comic Sans MS,Comic Sans,Chalkboard SE,Comic Neue,cursive,sans-serif;font-size:2.2rem;color:#c1440e;text-align:center;margin-bottom:2.5rem;margin-top:-10rem;text-shadow:2px 4px 0 #fff7e0,3px 6px 0 #cdaa7d;font-weight:700}.missed-msg[_ngcontent-%COMP%]{position:fixed;top:70px;left:50%;transform:translate(-50%);font-family:Comic Sans MS,Comic Sans,Chalkboard SE,Comic Neue,cursive,sans-serif;font-size:2rem;color:#c1440e;background:none;border-radius:16px;padding:.7rem 2.2rem;text-shadow:1px 2px 0 #fff7e0,2px 3px 0 #cdaa7d;z-index:30;pointer-events:none;text-align:center;font-weight:700;transition:opacity .3s linear}\"]\n      });\n    }\n  }\n  return HotDogCatcherComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}